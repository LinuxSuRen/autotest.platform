<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security.xsd
	http://www.springframework.org/schema/security/oauth2
	http://www.springframework.org/schema/security/spring-security-oauth2.xsd">

	<!-- 
	<debug />
	 -->
	<http security="none" pattern="/user_info/login.su" />
	<http security="none" pattern="/user_info/regist.su" />
	<http security="none" pattern="/user_info/registProcess.su" />
	<http security="none" pattern="/data_base/init_schema.su" />
	<http security="none" pattern="/data_base/create_schema.su" />
	<http security="none" pattern="/static/**" />
	
	<http pattern="/suite_runner_info/*.json" create-session="never"
		entry-point-ref="oauth2AuthenticationEntryPoint"
		access-decision-manager-ref="oauth2AccessDecisionManager"
		use-expressions="false">
		<anonymous enabled="false"/>
		<intercept-url pattern="/suite_runner_info/*.json" access="ROLE_USER,SCOPE_READ"/>
		<custom-filter ref="picResource" before="PRE_AUTH_FILTER"/>
		<access-denied-handler ref="oauth2AccessDeniedHandler"/>
	</http>
	
    <http pattern="/oauth/token.su" create-session="stateless"
    	authentication-manager-ref="oauth2AuthenticationManager"
        entry-point-ref="oauth2AuthenticationEntryPoint" use-expressions="false">
        <intercept-url pattern="/oauth/token.su" access="IS_AUTHENTICATED_FULLY"/>
        <anonymous enabled="false"/>
        <http-basic entry-point-ref="oauth2AuthenticationEntryPoint"/>

        <custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER"/>
        	<access-denied-handler ref="oauth2AccessDeniedHandler"/>
        <csrf disabled="true"/>
    </http>
    
	<http use-expressions="false" auto-config="true"
		authentication-manager-ref="authenticationManager">
		<intercept-url pattern="/oauth/**" access="ROLE_USER" />  
		<intercept-url pattern="/**" access="ROLE_USER" />
		
		<headers>
			<frame-options policy="SAMEORIGIN" />
		</headers>

		<session-management>
			<concurrency-control max-sessions="400"
				error-if-maximum-exceeded="true" />
		</session-management>
		
		<csrf disabled="true" />
		
		<form-login login-page="/user_info/login.su"
			login-processing-url="/user_info/login_process.su"
			default-target-url="/"
			authentication-success-handler-ref="authSuccessHandler"
			authentication-failure-url="/user_info/login.su?error=true"
			username-parameter="username"
			password-parameter="password"/>
			
		<logout logout-url="/user_info/logout.su"
			logout-success-url="/user_info/login.su"
			invalidate-session="true"
			delete-cookies="JSESSIONID" />
	</http>
	
	<authentication-manager id="oauth2AuthenticationManager">  
    	<authentication-provider user-service-ref="oauth2ClientDetailsUserService"/>  
	</authentication-manager> 
	
	<authentication-manager id="authenticationManager">
		<authentication-provider user-service-ref="userService">
			<password-encoder hash="plaintext" />
		</authentication-provider>
	</authentication-manager>
	
	<!-- OAuth2 -->
	<oauth2:client-details-service id="clientDetailsService">
		<oauth2:client client-id="m1" authorized-grant-types="password,authorization_code,refresh_token,implicit"
			secret="abc"
			scope="read,write,trust" authorities="ROLE_CLIENT,ROLE_TRUSTED_CLIENT"
			resource-ids="pic_res"/>
	</oauth2:client-details-service>
	
	<oauth2:resource-server id="picResource" resource-id="pic_res" token-services-ref="tokenServices"/>
	
	<oauth2:authorization-server client-details-service-ref="clientDetailsService"
		token-services-ref="tokenServices"
		user-approval-handler-ref="oauthUserApprovalHandler"
		user-approval-page="oauth/oauth_approval"
		error-page="oauth/oauth_error">
		<oauth2:authorization-code/>
		<oauth2:implicit/>
		<oauth2:refresh-token/>
		<oauth2:client-credentials/>
		<oauth2:password/>
	</oauth2:authorization-server>
	
	<!-- Spring Beans -->
	<beans:bean id="authSuccessHandler"
		class="org.suren.autotest.platform.security.AutoTestAuthSuccessHandler">
	</beans:bean>
	
	<beans:bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<beans:property name="basenames">
			<beans:list>
				<beans:value>message</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
	
	<beans:bean id="oauth2ClientDetailsUserService"  
	            class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">  
	    <beans:constructor-arg ref="clientDetailsService"/>  
	</beans:bean> 
	
	<beans:bean id="userService" class="org.suren.autotest.platform.security.AutoTestUserDetailsService">
	</beans:bean>
	
	<beans:bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore">
	</beans:bean>
	
	<beans:bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<beans:property name="tokenStore" ref="tokenStore"></beans:property>
		<beans:property name="supportRefreshToken" value="true"></beans:property>
		<beans:property name="clientDetailsService" ref="clientDetailsService"></beans:property>
	</beans:bean>
	
	<beans:bean id="oauth2AuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint"></beans:bean>
	
	<beans:bean id="oauth2AccessDeniedHandler"
		class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler"></beans:bean>
	
	<beans:bean id="oauth2AccessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
		<beans:constructor-arg>
			<beans:list>
				<beans:bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter"></beans:bean>
				<beans:bean class="org.springframework.security.access.vote.RoleVoter"></beans:bean>
				<beans:bean class="org.springframework.security.access.vote.AuthenticatedVoter"></beans:bean>
			</beans:list>
		</beans:constructor-arg>
	</beans:bean>  
  
    <beans:bean id="clientCredentialsTokenEndpointFilter"  
        class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">  
        <beans:property name="authenticationManager" ref="oauth2AuthenticationManager" />  
    </beans:bean>
    
   	<beans:bean id="oauthUserApprovalHandler" class="org.springframework.security.oauth2.provider.approval.TokenStoreUserApprovalHandler">
        <beans:property name="tokenStore" ref="tokenStore"/>
        <beans:property name="clientDetailsService" ref="clientDetailsService"/>
        <beans:property name="requestFactory" ref="oAuth2RequestFactory"/>
    </beans:bean>
    
   <beans:bean class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory"
                id="oAuth2RequestFactory">
        <beans:constructor-arg name="clientDetailsService" ref="clientDetailsService"/>
    </beans:bean>
</beans:beans>